Complexity
Time complexity: O(n)
Space complexity: O(1)


answer 1 : 

package main

import "fmt"

func main() {
	prices := []int{7, 1, 5, 3, 6, 4}
	fmt.Println("prices of stcks ", prices)
	profit := maxProfit(prices)
	fmt.Println("Maximum Profit From stock ", profit)

}

func maxProfit(prices []int) int {
    bestProfit := 0
    left := 0
    for right := 1; right < len(prices); right++ {
        if prices[left] > prices[right] {
            left = right
        } else {
            bestProfit = max(bestProfit, prices[right]-prices[left])
        }
    }

    return bestProfit
}

func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}

solution 2:

func maxProfit(prices []int) int {
    if len(prices) <= 1 {
		return 0
	} 
    
    min, maxSale := prices[0], 0

	for _,price := range prices {
		if price < min {
			min = price
        } else if (price-min) > maxSale{
			maxSale = price-min
		}
	}
	
	return  maxSale
}

solution 3: 

func maxProfit(prices []int) int {
    minPrice := prices[0]
    maxProfit := 0
    for i := 1; i < len(prices); i++ {
        price := prices[i]
        if price < minPrice {
            minPrice = price
        } else {
            profit := price - minPrice
            if profit > maxProfit {
                maxProfit = profit
            }
        }
    }
    return maxProfit
}

solution 4:

func maxProfit(prices []int) int {
	output := 0
	lowPrice := prices[0]

	for _, val := range prices {
		if val < lowPrice {
			lowPrice = val
		}

		if output < val-lowPrice {
			output = val - lowPrice
		}
	}

	return output
}


